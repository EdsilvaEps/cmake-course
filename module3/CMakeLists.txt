cmake_minimum_required(VERSION 3.0.0) # minimum required version of cmake for this script to work

project(Calculator_project VERSION 1.0.0) # setting project name and version

# add_subdirectory(<directory>) tells cmake to go into those directories and search for other cmakelists files
# and run those one by one
add_subdirectory(my_math)
add_subdirectory(my_print)


# add_executable(<Exec Name> <Source Files>) => used when we want an executable at the end of the build process
add_executable(calculator
main.cpp)

# target_link_libraries(<executable> <lib1> <lib2>...) => links a library to an executable
target_link_libraries(calculator PRIVATE my_math my_print)

# libraries and executables are called "Targets" in cmake
# common target properties:
# INTERFACE_LINK_DIRECTORIES
# INCLUDE_DIRECTORIES
# VERSION
# SOURCES

# target_link_libraries(calculator INTERFACE my_math my_print) => means that an INTERFACE_LINK_LIBRARIES property has been set to be used by 
# all the targets that depend upon calculator
# PRIVATE keyword means that properties should not be propagated beyond the current project
# PUBLIC, PRIVATE and INTERFACE are options of INTERFACE_INCLUDE_DIRECTORIES property or provided <target>
# after setting them on target link libraries, theyll be visible to calculator

# TARGET PROPERTIES
# PRIVATE
# ex target_include_directories(my_print PRIVATE include)
# sets property INTERFACE_INCLUDE_DIRECTORIES or target my_print to <not-set>
# this means that main.cpp wont be able to find the include dir, because its only 
# set to the current dir
# the current target needs the dir but other targets dont

# INTERFACE
# the current project does not need the diretory, but other targets do 

# PUBLIC
# both the current target and other targets will need the directory

# * more than one executable can be generated by CMakesList
# * two targets cannot be of the same name

# target_include_directories(<target> <scope> <dir1> <dir2> ...) - command to specify for cmake where the header files are located
# target - name of target 
# scope - scope of properties to be propagated
# dir - directories where the header files are located

# if there are arguments with different scopes, they can be either aggregated on a single command or divided in multiple ones
# target_include_directories(target PRIVATE xxx PUBLIC yyy)
#                   ||
# target_include_directories(target PRIVATE xxx)
# target_include_directories(target PUBLIC yyy)